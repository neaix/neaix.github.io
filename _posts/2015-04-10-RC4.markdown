---
layout: post
title: "RC4算法学习总结" 
comments: true
share: true
tags: C/C++
---


更新0.0：

缺陷：

假如解密的时候密码错了，将会导致源文件也被改变了，而且除非再原模原样输错一次密码，则将无法还原。

胡老师的解决方案是，计算key的哈希值，加密时把哈希值存入文件，解密时只要判断哈希值是否相等，若不相等，则不执行解密算法！

但是这样就导致了，加密和解密用的原程序不可能一样，因为加密的时候是读入key的哈希值到文件，解密的时候却是读出文件中的哈希值来和key比较。

----------

我的RC4算法版本是 Apple Open Source 版：

[http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/crypto/rc4/rc4.c](http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/crypto/rc4/rc4.c "http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/crypto/rc4/rc4.c")

顺便把C语言的文件操作给重温(被虐)了一遍。

下面的代码必须以命令行形式打开，并传入文件名参数。

之后又做了一个安装包，把RC4加密功能加到了文件的右键菜单，可实现文件加解密（且加密解密一体化）。（因为rc4算法是对称的，而我把加解密的文件名变化也用异或实现了对称性）

源代码下载：[http://oneoneone.wang/coding/release/rc4/rc4.rar](http://oneoneone.wang/coding/release/rc4/rc4.rar "http://oneoneone.wang/coding/release/rc4/rc4.rar")

最终安装包下载： [http://oneoneone.wang/coding/release/rc4/rc4.exe](http://oneoneone.wang/coding/release/rc4/rc4.exe "http://oneoneone.wang/coding/release/rc4/rc4.exe")

安装包可以实现右键rc4加解密功能！

----------

## rc4.h ##

<br>
<br>

	#ifndef _SYS_CRYPTO_RC4_RC4_H_
	typedef unsigned char u_char;
	#define _SYS_CRYPTO_RC4_RC4_H_
	
	struct rc4_state {
		u_char	perm[256];
		u_char	index1;
		u_char	index2;
	};
	
	extern void rc4_init(struct rc4_state *state, const u_char *key, int keylen);
												   //密钥                密钥长度
	extern void rc4_crypt(struct rc4_state *state,
		u_char *inbuf, u_char *outbuf, long buflen);
	
	#endif

<br>
<br>


----------

<br>
<br>

## rc4.c ##


	#include "rc4.h"
	
	static __inline void swap_bytes(u_char *a, u_char *b)
	{
		u_char temp;
	
		temp = *a;
		*a = *b;
		*b = temp;
	}
	
	/*
	* Initialize an RC4 state buffer using the supplied key,
	* which can have arbitrary length.
	*/
	
	//KSA过程
	//rc4_init的作用是，利用提供的key，来初始化盒子
	//该过程不会修改key
	void rc4_init(struct rc4_state *state, const u_char *key, int keylen)
						//给定的state			 //key             //key长度
						//注意，key是以字符串形式传入的，且无长度限制
	{
		u_char j;
		int i;
	
		/* Initialize state with identity permutation */
		for (i = 0; i < 256; i++)
			state->perm[i] = (u_char)i;
		//把state给初始化赋值（0~255的u_char类型字符）
	
		state->index1 = 0;
		state->index2 = 0;
		//初始化两个索引
	
		/* Randomize（随机化） the permutation（排列） using key data */
		//KSA算法
		//将一个初始取值是0~255的perm打乱，打乱后的结果依赖于之前确定的key。
		//正是因为它是依赖于key来打乱的，所以解密的时候，如果key相同，则打乱次序也相同，就能达到密码验证的功能了
		//在这里可以看到key[]的取值应该是0~255，否则会产生负值。
		for (j = i = 0; i < 256; i++) {
			j += state->perm[i] + key[i % keylen];
			swap_bytes(&state->perm[i], &state->perm[j]);//交换这两个数
			//解密的时候再交换一下就回来了，所以能够原样还原数据
		}
		//在perm盒子里遍历256次
		//根据key的长度和key的值来增大 j，同时，算法保证 j <256 。
	}
	
	/*
	* Encrypt some data using the supplied RC4 state buffer.
	* The input and output buffers may be the same buffer.
	* Since RC4 is a stream cypher, this function is used
	* for both encryption and decryption.
	*/
	
	//PRGA过程
	//rc4_crypt的作用：利用前面得到的盒子，加密字符串
	
	//切记！！！这个rc4标准算法里是用来给字符串加密的，不要直接把文件指针给传入函数参数中
	//编译器对于文件指针转化成u_char指针不会报错！一开始在这里浪费了很长时间调试
	
	void rc4_crypt(struct rc4_state *state,
		u_char *inbuf, u_char *outbuf, long buflen)
	//需要加密的字符串  //字符串输出的位置（可一样，即覆盖加密字符串）    //buflen是长度（即字符数）
	{
		int i;
		u_char j;
	
		//逐byte产生K，按顺序和等待加密的buf的一个byte进行按位异或。
		//得到的就是加密后的字符串了。
		//RC4的解密过程和加密完全一样，就像1 / 0两次异或后不变。所以RC4也叫对称加密算法。
		for (i = 0; i < buflen; i++) {
	
			/* Update modification（修正） indicies（索引） */
			state->index1++;
			state->index2 += state->perm[state->index1];
	
			/* Modify（修正） permutation（排列） */
			swap_bytes(&state->perm[state->index1],&state->perm[state->index2]);
	
			/* Encrypt/decrypt next byte */
			j = state->perm[state->index1] + state->perm[state->index2];
			outbuf[i] = inbuf[i] ^ state->perm[j];//异或
		}
	
	}
	


<br>
<br>


----------


<br>
<br>

## fileOperate.h ##

	#include <stdio.h>
	typedef unsigned char u_char;
	
	
	long getFileSize(FILE *file);
	
	void fileToStr(FILE *input, u_char *inbuf, const long size);
	
	void strToFile(u_char *outbuf, const long size, FILE *output);
	
	void getNewFileName(const char *fullName, char *filename, const u_char key[]);



<br>
<br>


----------


<br>
<br>

## fileOperate.c ##

	#define _CRT_SECURE_NO_WARNINGS
	#include <stdio.h>
	#include <string.h>
	
	typedef unsigned char u_char;
	
	
	
	//用来计算文件大小
	//小心，由于这个函数用了fseek，变换了文件定位，导致后面的文件操作全部失败了！
	//fseek的作用是：重定位流(数据流/文件)上的文件内部位置指针
	//这里用来使流的位置被设置到以“SEEK_END”为基准，偏移0L个位置（即使其指向文件最后）
	//而函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。
	long getFileSize(FILE *file)
	{
		fseek(file, 0L, SEEK_END);
		long size = ftell(file);
		fseek(file, 0L, SEEK_SET);//重置文件位置指针
		//这里切记使其文件位置指针回到文件开始，不然之后文件操作会凌乱掉
	
		return size;
	}
	
	
	//把文件变成字符串
	void fileToStr(FILE *input, u_char *inbuf, const long size){
		//下面注释掉的版本很混乱，之前用fgetc错误，后来又没怎么弄懂fread的原理
		//char ch = fread(inbuf,1,1,input); // 从文件中读取的字符不能为u_char，因为EOF是-1
		//						            // 若为u_char，则永远不会为EOF了
		//long buflen = 0;
		//while (ch != NULL)
		//{
		//	inbuf[buflen] = (u_char) ch;
		//	++buflen;
		//	ch = fread(inbuf, 1, 1, input);
		//}
		//return buflen;
		//------------------------------
		//while (fread(ch, 1, 1, input) > 0){
		//	inbuf[i++];
		//}
	
		//实际上，文件变成字符串只要这么一个函数就行了
		//inbuf是一个数组指针，不用担心内部会怎么操作，直接能够传入字符数组的！
		fread(inbuf, 1, size, input);
	}
	
	//字符串变成文件
	void strToFile(u_char *outbuf, const long size, FILE *output){
		//for (i = 0; i < buflen; ++i){
		//	fwrite(outbuf, 1, 1, output);
		//}//这里没有搞清楚fwrite的作用
	
		//也是只要一个函数就能全部读取
		fwrite(outbuf, 1, size, output);
	}
	//字符串变成文件，文件变成字符串的总结：
	//分为两部分：
	//1.计算文件大小：用最上面的那个函数
	//2.利用文件大小malloc一个动态数组，如：
	//  u_char *inbuf=(u_char *)malloc((sizeof(u_char))*size);
	//3.再利用块读入输出就可以直接转化了：
	//fread(inbuf, 1, size , input);
	//fwrite(outbuf, 1, size, output);//这里参数变成(outbuf,10,size/10,output)也行
	//                                不用管size是否能整除10，没关系的
	//更新 1.0: 上面那句话是错误的，size/10还是会损失的，只不过有时候文件能够容许这类小损失
	
	
	
	//从源文件名中获得加密文件名字：
	//加密版本：
	void getNewFileName(const char *fullName, char *filename,const u_char key[]){
		char *name[10]; //文件名中最多可有10个'.'
	
		char realFull[100];//用来保存真正的文件全名
		//注意，从参数中传入的argv[i]并不是C风格字符串，所以要在最后给它加'\0'
		int m;
		for (m = 0; m < strlen(fullName); ++m){
			realFull[m] = fullName[m];
		}
		realFull[m] = '\0';//转化成了c风格字符串
	
		char *str = realFull;//传入指针，方便设NULL
		int i = 0;
		for (i = 0; (name[i] = strtok(str, ".")) != NULL; ++i){
			str = NULL;
		}
	
		int sum = 0, t, p;
		for (t = 0; t<i - 1; ++t){// t<i-1 是为了让最后的类型名不读入即类型名存在了name[i-1]中
			for (p = 0; p<strlen(name[t]); ++p){
				filename[p + sum] = (name)[t][p];
				//上面这个有点小技巧，利用了C中指针和数组的等价性
				//构造一个新的文件名
			}
			filename[p + sum] = '.';
			++p;
			//还原'.'
			sum += p;
		}//到这里文件名为最后'.'之前的字符串:E://haha.cn/xxx.
	
	
		////接下来利用name[i-1]中存着的类型名逆序来作为加密后文件类型名
		////更新1.0：这里的类型名逆序有一个问题，txt逆序不变，如果这时还是以它为名字
		////        会导致源文件和加密后文件是一个，且源文件以w形式被打开（并且默认被清空）！！！！
		//for (p = 0; p < strlen(name[i - 1]); ++p){
		//	filename[p + sum] = name[i - 1][strlen(name[i-1])-1-p];
		//} //所以逆序这个策略失败。
	
		/*于是因为考虑到最好让加密解密共用一个程序，不要分开
		所以必须对文件类型名采取一种用两次会恢复的算法
		因此想到能不能把类型名弄到rc4算法中进行加密，这样还能防止别人看出源文件类型
		试验1.0:对类型名（已经存入了name[i-1]指针中）进行rc4
		试验1.0放弃：没必要为了几个字符去影响一个算法，直接异或更好
		试验2.0:对类型名与key异或：*/
		char typeName[10];
		for (p = 0; p < strlen(name[i - 1]); ++p){
			typeName[p] = name[i - 1][p] ^ (char)key[p];
		}
		for (p = 0; p < strlen(name[i - 1]); ++p){
			filename[p + sum] = typeName[p];
		}
		//试验2.0:失败，别的都正常，就是word会失败(更新4.0中找到了原因)
		//猜测原因：更改一个文件扩展名的时候，系统会警告可能导致文件不可用
		//(不是这个原因，见更新4.0)
		//所以这个文件扩展名不能随意乱改(这个判断错误，见更新4.0)。但是也不能改文件全名，因为文件全名中有路径
		//也不能改文件名，因为加密后用户会忘了原本是什么文件
		//更新3.0:我通过16进制文件对比，我发现word加解密失败是因为加密的时候文件会少2个字节
		//更新4.0：前面的错误并不是更改文件扩展名所致，而是我前面测试的size/10没有去改掉，所以才会少字节
		//对于word而言，短短的一两个字符丢失增加都会导致整个文件不可读
	
		//综上所述，试验2.0的策略可以用
	
		sum += p;
		filename[sum] = '\0';//收尾
	}
	
	////解密版本：  //更新：决定把加密解密都变成一个程序就可以完成操作！
	//所以取消了这个版本的函数
	//void getNewFileName_De(char fullName[], char *filename){
	//	//2015.4.10  0:29  没办法知道原始文件的类型！
	//	//2015.4.10  16:30 前面加密的时候不应该把类型名给直接弄掉，可以采用
	//					   //把类型名逆序
	//					   //或者把在最后加一个字符
	//}


<br>
<br>


----------


<br>
<br>


## main.c ##

	//总结：
	
	//1.最大的一个教训是对于word这类文本，只要少一个二进制位就会无法打开
	//而对于图片之类的，少点字符反而倒并没有多大问题
	//2.二进制读写，要用fread和fwrite，不要用fgetc，
	//fgec很奇葩的会把换行符给忽略，把文件大小都改了，但是还原时却还能回来，不知道怎么做到的
	//fread()的坏处是一次性读完了（也是好处），这样我就无法显示出读取进度了
	//3.对于文件位置指针要小心，很多函数会改变文件位置指针，一定要查清楚，并且用完重置
	//4.对于strlen()这类函数只能对于C风格字符串操作，不能对没有带'\0'的字符数组操作！！！
	
	//-------------------------------------------
	
	
	#define _CRT_SECURE_NO_DEPRECATE
	#include <stdio.h>
	#include <stdlib.h>
	#include "rc4.h"
	#include "fileOperate.h"
	
	int main(int argc, char  *argv[]){
		struct rc4_state state;
		u_char key[256];
		printf("Enter the key\n");
		scanf("%s", key);
	
		FILE *input = fopen(argv[1], "rb");
		if (input == NULL){
			printf("Open Failed!\n");
			return 1;
		}
	
		int len = strlen(argv[1]);
		char *filename = (char *)malloc(sizeof(char)*len);
		//前提是我要的文件名大小和之前文件名大小一样
		getNewFileName(argv[1],filename,key);
		//通过key来异或文件扩展名，路径和文件名字不变
	
		FILE *output = fopen(filename, "wb");
		if (output == NULL){
			printf("Creat Failed!\n");
			return 1;
		}
	
		long size = getFileSize(input);//得到当前文件大小
	
		//问题0.0：
		//这里有一个奇怪的地方，文件进行加密后，会发现大小改变了
		//此时原来的size无法使用了，只能用真正的文件大小buflen了
		//这里怀疑可能是fileToStr函数有bug，但是不知道问题出在哪里
		//另外，对于txt文件可以比较好的加解密，但是图片文件就失败了
		//更新1.0：
		//问题不是出在fileToStr函数，而是读取文件fopen没有用二进制读取！！！
		//用二进制读取以后，会发现txt文件完美加密解密，但是对于图片文件还是不行(fgetc,fread下都试过了)！
		//更新2.0：成功
		//对于图片之类的文件，我感觉还是能用fgetc读取的，但是不知哪里错了
		//上次的fread用错了，这次改成了一次性的块读取，显然就成功了。
		//关于c语言的文件输入输出目前还是半知半解，不知道二进制内部是在如何操作的。
		//这次的版本是能够保证成功，但是细节处理不知道能不能再优化下了，有些东西还是没完全弄懂
	
	
		//用key初始化盒子
		rc4_init(&state, key, strlen(key));
	
		u_char *inbuf=(u_char *)malloc((sizeof(u_char))*size);
		u_char *outbuf = (u_char *)malloc(sizeof(u_char)*size);
		//这两个看上去是指针，其实是用它们作字符数组来存放文件的内容
	
		fileToStr(input, inbuf,size);//把文件全部输入进一个字符串数组
									//这个坏处是文件大了以后对内存占用很大。
		
		rc4_crypt(&state, inbuf, outbuf, size);
		//利用之前初始化了之后的盒子，把inbuf中的内容加密后输出到outbuf
	
		strToFile(outbuf, size , output);
		//把outbuf中的内容输出到文件
	
		printf("Succeed!\n");
	
		free(inbuf);
		free(outbuf);
		free(filename);
		fclose(input);
		fclose(output);
	
		remove(argv[1]);
	
		return 0;
	}
	

---
layout: post
title: "Ubuntu14.04服务器配置学习" 
comments: true
share: true
tags: 笔记
---


1. 建议每次安装新软件时，都更新一次软件源：

	apt-get update

2. 安装解压缩、下载和数据同步以及系统日志软件这四种常用工具：

	apt-get install unzip zip wget rsync
		

3. 安装 php5-fpm php5-cgi

	apt-get install php5-cgi php5-fpm php5-gd php5-mysql php5-curl php5-mcrypt php5-common php-apc


	安装完毕后，我们调整下 php5-fpm 使其采用 127.0.0.1:9000 进行监听

	sed -i -e 's/listen =.*$/listen = 127.0.0.1:9000/' `grep -R -l listen /etc/php5/fpm`

	完毕后，重启下 php5-fpm，执行如下命令重启

	service php5-fpm restart 

4. 安装mysql：

	apt-get install mysql-server

	(中途需要输入密码)

	mysql 数据库优化

	执行本步骤可以将Mysql的占用内存由150M降到100M。
<code>
	cp /etc/mysql/my.cnf /etc/mysql/my.cnf.`date +%s`

	find /usr/share/doc/mysql* -name my-small.cnf -exec cp {} /etc/mysql/my.cnf \;

	sed -i 's/\[mysqld\]/&\nuser            = mysql\n/' /etc/mysql/my.cnf
</code>
	重启下 Mysql服务：

	service mysql restart

5. 安装 nginx：

	apt-get install nginx
	启动/重启
	service nginx start

6. 安装 phpmyadmin：

	apt-get install phpmyadmin

	若为Apche2 ，则在提示选择时空格选择apche2再回车
	若为nginx，则直接回车

	此时phpmyadmin仅仅只是安装在usr/share/下，要把它建立快捷方式到网站根目录下：
		
		ln -s /usr/share/phpmyadmin /var/www/html/

7. 配置虚拟站点：

	假设前提： 你有一个域名 test.com ，你希望搭建两个站点，第一个站点是 www.test.com 和 test.com 为主页，同时希望提供 bbs.test.com 为论坛。
	
	注意，下面的文档对多个不同的域名也是适用的。

	1） 配置域名

	去域名商提供的面板将 test.com 域名的 A 记录修改为 VPS 的 IP.
	
	2） 上传程序
	约定两个站点的目录如下，为了方便备份，站点的目录最好集中存放在 /var/www/html 目录。
	
	www.test.com(test.com) 对应目录： /var/www/html/test
	bbs.test.com 对应目录： /var/www/html/bbs
	
	3） 多域名配置
	
	
	编辑www.test.com的站点配置文件test.com.txt ，其中站点 http://www.test.com 和 http://test.com 的网站目录为 /var/www/html/test/
	<code>
		server	{
			listen       80;
			server_name www.test.com test.com;
			index index.html index.htm index.php;
			root  /var/www/test/;
			location ~ \.php$ {
				include /etc/nginx/fastcgi_params;
				fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
				fastcgi_pass  127.0.0.1:9000;
				}
			}
	</code>
	编辑bbs.test.com的站点配置文件 bbs.test.com.txt ， 其中站点 bbs.test.com 的网站目录为 /var/www/html/bbs/
	<code>
		server	{
			listen       80;
			server_name bbs.test.com;
			index index.html index.htm index.php;
			root  /var/www/bbs/;
			location ~ \.php$ {
				include /etc/nginx/fastcgi_params;
				fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
				fastcgi_pass  127.0.0.1:9000;
				}
			}
	</code>
	将这两个文件上传到 /etc/nginx/sites-enabled/ 目录



8. nginx 限制最大并发数

	有时候蜘蛛会按照超过20个以上的并发抓取数据，直接爆掉vps。表现为：可以ping，但网站打不开、数据库连不上或无法ssh。

	为了防止Vps被大的访问量爆掉，需要限制并发数，这里#1 VPS 调整为10， #2可以将下面的10修改为20，#3为30，以此类推。

	也可以根据压力测试来确定最大并发数，确定后，将下面的命令中的 10 改为你确定的并发数即可，其它数值如 5 不要修改。

	因为命令中包括了 ` 号，所以请复制命令后到putty直接按鼠标右键粘贴执行：
<code>
	sed -i -e 's/pm.max_children =.*$/pm.max_children = 10/' `grep -R -l pm.max_children /etc/php5/fpm`
	sed -i -e 's/pm.start_servers =.*$/pm.start_servers = 5/' `grep -R -l pm.max_children /etc/php5/fpm`	
	sed -i -e 's/pm.max_spare_servers =.*$/pm.max_spare_servers = 10/' `grep -R -l pm.max_children /etc/php5/fpm`
</code>
	执行完毕后，重启下 php-fpm 服务：
	
	service php5-fpm restart

9. nginx 限制同一IP的并发数和连接流量：

	开启nginx并发支持：

	echo "limit_conn_zone \$binary_remote_addr zone=one:10m;" > /etc/nginx/conf.d/limitconn.conf

	然后打开虚拟站点配置文件，如编辑上面例子中的 bbs.test.com 站点配置文件 bbs.test.com.txt，

	在 server_name bbs.test.com; 这一行下面插入如下：

		limit_conn one 20;//这里我发现会出现zero size shared memory zone "one"错误。所以这个还是不要加了
		limit_rate 200k;

	上面的20，标示同一IP的最大并发数为20。200k为连接的最大速度为200k。

	注意，这里控制的流量是针对单一连接的，并不是同一IP的最大速度，其最大速度为200k*20=4000k。

	最终修改后的结果如下所示：

	server	{
		listen       80;
		server_name bbs.test.com;
		#limit_conn one 20;
		limit_rate 200k;
		index index.html index.htm index.php;
		root  /var/www/bbs/;
		location ~ \.php$ {
			include /etc/nginx/fastcgi_params;
			fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
			fastcgi_pass  127.0.0.1:9000;
			}
		}

	将上面的配置文件上传到 /etc/nginx/sites-enabled/ 目录，覆盖后，执行以下命令重启 nginx 使配置生效：

	service nginx restart

10. 查看 nginx 日志

	Nginx的日志放在 /var/log/nginx/ 目录下，可以使用 filezilla 下载下来查看。

11. HTTPS化

	1）使用 StartSSL 的免费一年证书的服务。通过教程，先根据信息生成ssl.key，再生成ssl.crt，中间有一步生成ssl.csr不知道有啥用，因为后来没用到。
	2) 再在nginx上配置。我不知道服务器发什么抽，不是在默认的那个nginx的配置文件里配置，变成了在那个/etc/nginx/sites-enabled/下的hznuer.com.txt文件里配置了，这是用来作多域名虚拟站点配置的，我这里没怎么搞懂变成这样了。但是也只能将错就错，在这个文件里写：

	更新：

	我明白nginx是如何识别/etc/nginx/sites-enabled/下的那些txt文件的了，在nginx.conf里有两个include语句：

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	它们会把这两个目录下对应格式文件全部包含，所以这时候要小心，不要让同一个文件两个文件夹里都出现，这样会产生重复包含的错误。


		server{
		      listen 80;
		      server_name hznuer.com www.hznuer.com;
		      root  /var/www/hznuer;
		      location / {
		          rewrite (.*) https://hznuer.com$1 permanent;
		      }
		      }
		
		server	{
		
			#一开始这里也监听了一个80端口，这样子是错误的！
			#会报出：nginx: [warn] conflicting server name "www.hznuer.com" on 0.0.0.0:80, ignored 的错误
	
		    listen 443 ssl;
			server_name hznuer.com www.hznuer.com;
		
			ssl on;
		    	ssl_certificate /etc/ssl/private/ssl.crt;
		    	ssl_certificate_key /etc/ssl/private/ssl.key;
		
		        ssl_prefer_server_ciphers on;
		        ssl_dhparam /etc/ssl/certs/dhparam.pem;
		        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
		        keepalive_timeout 70;
		        ssl_session_cache shared:SSL:10m;
		        ssl_session_timeout 10m; 
		
		        add_header Strict-Transport-Security max-age=63072000;
		        add_header X-Frame-Options DENY;
		        add_header X-Content-Type-Options nosniff;
		
			index index.html index.htm index.php;
			root  /var/www/hznuer;
			location ~ \.php$ {
				include /etc/nginx/fastcgi_params;
				fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
				fastcgi_pass  127.0.0.1:9000;
				}
			}



	开始的监听80端口用来把http访问301跳转成https的。

	重启nginx后就行了。

	这里遇到的问题是，在firefox下发现访问我域名说我连接不安全，大致可能是因为我界面里包含了非https的内容，或者我的证书它无法识别，目前暂时没有找到好的解决方案。奇怪的是，我过了一会儿再去上，它能进去了，虽然左上角还是说我不安全。
	
	后来我又用MIUI自带的系统浏览器登录，它说我安全证书并非来自可信的授权中心，我也是醉了。
	
	我用手机版的UC浏览器试了下，妈的也是不行。。。说我过期了或不可信，真是醉了。
	
	手机谷歌浏览器上也不行。。。。

	更新：

	发现这么一段话：

	"有些浏览器不接受那些众所周知的证书认证机构签署的证书，而另外一些浏览器却接受它们。这是由于证书签发使用了一些中间认证机构，这些中间机构被众所周知的证书认证机构授权代为签发证书，但是它们自己却不被广泛认知，所以有些客户端不予识别。针对这种情况，证书认证机构提供一个证书链的包裹，用来声明众所周知的认证机构和自己的关系，需要将这个证书链包裹与服务器证书合并成一个文件。"

	后来采用了下面的方法：

	wget http://cert.startssl.com/certs/ca.pem
	
	wget http://cert.startssl.com/certs/sub.class1.server.ca.pem
	
	cat ca.pem sub.class1.server.ca.pem >> ca-certs.crt
	
	cat ca-certs.crt >> ssl.crt

	也就是把ca.pem和sub.class1.server.ca.pem都加到ssl.crt中，最后在：

	-----END CERTIFICATE----------BEGIN CERTIFICATE-----

	这一段上手动给它中间加个换行，最后重启nginx就行了。
	
	这之后测试：谷歌浏览器电脑版和手机版，UC手机浏览器，电脑火狐浏览器，MIUI自带浏览器都能够正常访问。成功解决~

	相关教程：[https://s.how/nginx-ssl/](https://s.how/nginx-ssl/)
	
	[http://www.live-in.org/archives/1296.html](http://www.live-in.org/archives/1296.html)

	[http://liuzhichao.com/p/1769.html](http://liuzhichao.com/p/1769.html "http://liuzhichao.com/p/1769.html")

12. 备份nginx：

	备份Nginx的配置到 /root 下 ：

		cd
		tar czf nginx.tar.gz /etc/nginx

	弹出的tar: Removing leading `/' from member names 不用管也没事
13. 接下来又开始作死，想把jekyll的博客搬到阿里云，也弄成https。(github上次试过了，不能Https化)

	1) 安装ruby
		
	apt-get install ruby
	
	2) 安装bundler
	
	gem install bundler

	PS：这玩意由于被墙了导致有时候会不行，我第二次试了下，过了好长时间没反应，后来发现又通了。。。多试几次说不定就行了。

	3)安装jekyll
	
	gem install jekyll

	上面其实是在桌面上配置本地jekyll环境，但是我想应该服务器也差不多吧?暂时先这样弄着。

	4) 本来想着只要配置一个子域名，然后一模一样让它跳转到https站点，结果发现一个ssl证书只能有一个二级域名，所以想要再弄一个二级域名的ssl，只能重新再申请一个。

	5) 申请完了以后配置多域名折腾了半天，最后总算弄懂了，配置文件分别为：

	hznuer.com.txt:

		server{
	      listen 80;
	      server_name hznuer.com www.hznuer.com;
	      root  /var/www/hznuer;
	      location / {
	          rewrite (.*) https://hznuer.com$1 permanent;
	      }
	   }
	
	server	{
	
	    listen 443 ssl;
		server_name hznuer.com www.hznuer.com;
	
		ssl on;
	    	ssl_certificate /etc/ssl/private/ssl.crt;
	    	ssl_certificate_key /etc/ssl/private/ssl.key;
	
	        ssl_prefer_server_ciphers on;
	        ssl_dhparam /etc/ssl/certs/dhparam.pem;
	        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
	        keepalive_timeout 70;
	        ssl_session_cache shared:SSL:10m;
	        ssl_session_timeout 10m; 
	
	        add_header Strict-Transport-Security max-age=63072000;
	        add_header X-Frame-Options DENY;
	        add_header X-Content-Type-Options nosniff;
	
		index index.html index.htm index.php;
		root  /var/www/hznuer;
		location ~ \.php$ {
			include /etc/nginx/fastcgi_params;
			fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
			fastcgi_pass  127.0.0.1:9000;
			}
		}

	blog.hznuer.com.txt

		server{
	      listen 80;
	      server_name blog.hznuer.com;
	      root  /var/www/blog;
	      location / {
	          rewrite (.*) https://blog.hznuer.com$1 permanent;
	      }
	   }
	server	{
	
	    	listen 443 ssl;
		server_name blog.hznuer.com;
	
		ssl on;
	    	ssl_certificate /etc/ssl/private/blogssl.crt;
	    	ssl_certificate_key /etc/ssl/private/blogssl.key;
	
	        ssl_prefer_server_ciphers on;
	        ssl_dhparam /etc/ssl/certs/dhparam.pem;
	        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
	        keepalive_timeout 70;
	        ssl_session_cache shared:SSL:10m;
	        ssl_session_timeout 10m; 
	
	        add_header Strict-Transport-Security max-age=63072000;
	        add_header X-Frame-Options DENY;
	        add_header X-Content-Type-Options nosniff;
	
		index index.html index.htm index.php;
		root  /var/www/blog;
		location ~ \.php$ {
			include /etc/nginx/fastcgi_params;
			fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
			fastcgi_pass  127.0.0.1:9000;
			}
		}


	但是！！！jekyll的环境还是不行，打开网站都是乱七八糟的纯html文件。

	8月份重新捡起来弄了弄，完成了。[https://joway.github.io/blog/2015/08/09/Jekyll%E5%88%A9%E7%94%A8GitHook%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html](https://joway.github.io/blog/2015/08/09/Jekyll%E5%88%A9%E7%94%A8GitHook%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html)


14. 想用七牛来作CDN静态存储，参考教程：[http://wenda.wecenter.com/question/14306](http://wenda.wecenter.com/question/14306)

	有一个问题是我的网站是https的，(我现在心中千万批草泥马飞奔而过，早知道不吃空弄HTTPS了，妈的各种不支持，还好今天看到百度5月份发的一篇文章说现在支持HTTPS网站收录了，而且收录还更优先，不然我心里真的要醉了)，而七牛不能对https作镜像(以前是可以的，可能被有关方面阻止了，妈的)。

	这里我不得不佩服我机智。。。。。在nginx下的配置文件(我是hznuer.com.txt)里，对80端口加判断：

	server{
	      listen 80;
	      server_name hznuer.com www.hznuer.com oneoneone.wang dn-hznuer.qbox.me;
	      root  /var/www/hznuer;
	
	      if ($http_user_agent !~* (qiniu)) {
			rewrite (.*) https://hznuer.com$1 permanent;
	      }
	      location / {
	              
	      }
	}

	这样就能够针对七牛使用80端口读取了！甚至也可以对百度开，只要qiniu|baidu，这样就行了！

	接下来，就只要使用wecenter教程里的方法进行配置就行了。

	CDN最神奇的就是，你只要配置好了后，再访问你自己的域名，后台会请求到CDN的域名去得到静态资源，而CDN根据域名后的路径从你服务器上获取到静态资源，并存放在自己服务器，所以第一次访问可能会比较慢，但是之后再访问，都会从CDN上去得到静态文件，这样就能加快了访问速度，且七牛支持https的链接，所以仍然属于全站HTTPS。这样就及其顺利地解决了https站点的CDN问题！


	

----------

####  参考资料：  ####


- 1 [UbuntuVPS中文站](http://wiki.ubuntu.org.cn/Vps "http://wiki.ubuntu.org.cn/Vps")
- 2 [https安全链接的配置教程：startSSl免费证书申请与nginx的https支持配置](http://blog.jjonline.cn/linux/92.html "http://blog.jjonline.cn/linux/92.html")

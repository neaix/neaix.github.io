---
layout: post
title: "Python语法注意点" 
comments: true
share: true
tags: Python
---



## 1. 函数中的=与+=区别： ##
<br>
	
		def merge(nums1, m, nums2, n):
		        nums1=nums1+nums2
		        nums1.sort()
		num1=[0]
		num2=[1]
		merge(num1,0,num2,1)
		print (num1)

输出：
[0]

然而：

		def merge(nums1, m, nums2, n):
		        nums1+=nums2
		        nums1.sort()
		num1=[0]
		num2=[1]
		merge(num1,0,num2,1)
		print (num1)

输出[0,1]

**暂时不知道为什么？**

---

## 2. Python中无法写类似与C++中的swap函数（Python函数参数传递方式）： ##

		def f(num1,num2):
			num1=num1+num2
			num2=num1-num2
			num1=num1-num2
		num1=1
		num2=2
		f(num1,num2)
		print(num1,num2)

这样仍旧是输出： 1 2

原因：

Python 传参数可以理解为 C 的 const 指针（your_type* const your_variable），它所指向的对象可以被修改产生副作用，但变量本身不能修改指向其他对象。这个和 C++ 的 reference 差不多。

对于Python的几点总结：

1. 对于Python，变量 与 对象之间的关系：

在python中，类型属于对象，变量是没有类型的。所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。在看到一个python变量的时候，把变量和真正的内存对象分开。

2. “可更改”（mutable）与“不可更改”（immutable）对象：

在python中，strings, tuples, 和numbers是不可更改的对象，而list,dict等则是可以修改的对象。

例子：

	nfoo = 1
	nfoo = 2

这时，内存中原始的1对象因为不能改变，于是被“抛弃”，另nfoo指向一个新的int对象，其值为2

	lstFoo = [1] 
	lstFoo[0] = 2

更改list中第一个元素的值，因为list是可改变的，所以，第一个元素变更为2，其实应该说有一个新int对象被指定给lstFoo 所指向的对象的第一个值，但是对于lstFoo 来说，所指向的对象，并没有变化，就是这个看似void*的变量所指向的对象仍旧是刚刚的那个有一个int对象的list。

Python的函数参数传递：传值？引用？
对于变量（与对象相对的概念），其实，python函数参数传递可以理解为就是变量传值操作（我说的是变量，不是对象)

例子：

	def ChangeInt( a ):
	      a = 10  # change the number
	nfoo = 2 
	ChangeInt(nfoo)
	print nfoo #结果是2

这时，有一个int对象2，和指向它的变量nfoo，当传递给ChangeInt的时候，按照传值的方式，复制了变量nfoo的值，这样，a就是nfoo指向同一个Int对象了，函数中a=10的时候，int是不能更改的对象，于是，做了一个新的int对象，令a指向它（但是此时，被变量nfoo指向的对象，没有发生变化），于是在外面的感觉就是函数没有改变nfoo的值，看起来像C++中的传值方式。

	def ChangeList( a ):
	      a[0] = 10  # change the number
	lstFoo = [2]
	ChangeList(lstFoo )
	print nfoo #结果是[10]

当传递给ChangeList的时候，变量仍旧按照“传值”的方式，复制了变量lstFoo 的值，于是a和lstFoo 指向同一个对象，但是，list是可以改变的对象，对a[0]的操作，就是对lstFoo指向的对象的内容的操作，于是，这时的a[0] = 10，就是更改了lstFoo 指向的对象的第一个元素，所以，再次输出lstFoo 时，显示[10]，内容被改变了，看起来，像C++中的按引用传递。

---

## 3. range 和 xrange 的区别 ##

**注意：！！！只对Python2.x而言，Python3中，已经统一变成range()了！**

range

函数说明：range([start,] stop[, step])，根据start与stop指定的范围以及step设定的步长，生成一个序列。

range示例: 

	>>> range(5) 
	[0, 1, 2, 3, 4] 
	>>> range(1,5) 
	[1, 2, 3, 4] 
	>>> range(0,6,2)
	[0, 2, 4]

xrange

函数说明：用法与range完全相同，所不同的是生成的不是一个数组，而是一个生成器。

xrange示例: 

	>>> xrange(5)
	xrange(5)
	>>> list(xrange(5))
	[0, 1, 2, 3, 4]
	>>> xrange(1,5)
	xrange(1, 5)
	>>> list(xrange(1,5))
	[1, 2, 3, 4]
	>>> xrange(0,6,2)
	xrange(0, 6, 2)
	>>> list(xrange(0,6,2))
	[0, 2, 4]

由上面的示例可以知道：要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间，这两个基本上都是在循环的时候用：

	for i in range(0, 100): 
	print i 
	for i in xrange(0, 100): 
	print i 

这两个输出的结果都是一样的，实际上有很多不同，range会直接生成一个list对象：

	a = range(0,100) 
	print type(a) 
	print a 
	print a[0], a[1] 

输出结果：

	<type 'list'>
	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
	0 1

而xrange则不会直接生成一个list，而是每次调用返回其中的一个值：

	a = xrange(0,100) 
	print type(a) 
	print a 
	print a[0], a[1] 

输出结果：

	<type 'xrange'>
	xrange(100)
	0 1


所以xrange做循环的性能比range好，尤其是返回很大的时候，尽量用xrange吧，除非你是要返回一个列表。


----------



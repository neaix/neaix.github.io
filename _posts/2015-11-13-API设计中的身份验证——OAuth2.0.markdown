---
layout: post
title: "API设计中的身份验证——OAuth2.0"
comments: true
share: true
tags: 服务器
---


##名词定义：

- Third-party application：第三方应用程序，又称"客户端"（client）
- HTTP service：HTTP服务提供商，即服务端
- Resource Owner：资源所有者，又称"用户"（user）
- User Agent：用户代理，可以是指浏览器
- Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。
- Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。

##OAuth 思路

OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。

"客户端"登录授权层所用的令牌（token）。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。

## 流程：

![](https://dn-joway.qbox.me/1447418096859_bg2014051203.png)

- （A）客户端请求用户给予授权。
- （B）用户同意给予客户端授权。
- （C）客户端使用上一步获得的授权，向认证服务器申请令牌。
- （D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。
- （E）客户端使用令牌，向资源服务器申请获取资源。
- （F）资源服务器确认令牌无误，同意向客户端开放资源。

## 客户端的授权模式

###授权码模式（authorization code）

优点：功能最完整、流程最严密的授权模式

步骤：

- （A）用户访问客户端，客户端将前者导向认证服务器。
- （B）用户选择是否给予客户端授权。
- （C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。
- （D）客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。
- （E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。


**A步骤中，客户端申请认证的URI，包含以下参数：**

- response_type：表示授权类型，必选项，此处的值固定为"code"
- client_id：表示客户端的ID，必选项
- redirect_uri：表示重定向URI，可选项
- scope：表示申请的权限范围，可选项
- state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。

**C步骤中，服务器回应客户端的URI，包含以下参数：**

- code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。

- state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。

**D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：**

- grant_type：表示使用的授权模式，必选项，此处的值固定为"authorization_code"。
- code：表示上一步获得的授权码，必选项。
- redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。
- client_id：表示客户端ID，必选项。


**E步骤中，认证服务器发送的HTTP回复，包含以下参数：**

- access_token：表示访问令牌，必选项。
- token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。
- expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
- refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。
- scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。

###简化模式（implicit）

不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。

步骤：

- （A）客户端将用户导向认证服务器。
- （B）用户决定是否给于客户端授权。
- （C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，**并在URI的Hash部分包含了访问令牌**。
- （D）浏览器向资源服务器发出请求，**其中不包括上一步收到的Hash值**。
- （E）**资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。**
- （F）浏览器执行上一步获得的脚本，提取出令牌。
- （G）浏览器将令牌发给客户端。



### 密码模式（resource owner password credentials）

- （A）用户向客户端提供用户名和密码。
- （B）客户端将用户名和密码发给认证服务器，向后者请求令牌。
- （C）认证服务器确认无误后，向客户端提供访问令牌。


### 客户端模式（client credentials）

客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。

- （A）客户端向认证服务器进行身份认证，并要求一个访问令牌。
- （B）认证服务器确认无误后，向客户端提供访问令牌。


## 更新令牌

如果用户访问的时候，客户端的"访问令牌"已经过期，则需要使用"更新令牌"申请一个新的访问令牌。

客户端发出更新令牌的HTTP请求，包含以下参数：

- granttype：表示使用的授权模式，此处的值固定为"refreshtoken"，必选项。
- refresh_token：表示早前收到的更新令牌，必选项。
- scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。

---
####  参考资料：  ####
- http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html

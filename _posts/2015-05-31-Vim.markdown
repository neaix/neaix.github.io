---
layout: post
title: "Vim学习笔记" 
comments: true
share: true
tags: 笔记
---

PS：~/.vim文件夹在windows下是~/vimfiles！

1. .vimrc 是控制 vim 行为的配置文件，位于 ~/.vimrc，不论 vim 窗口外观、显示字体，还是操作方式、快捷键、插件属性均可通过编辑该配置文件将 vim 调教成最适合你的编辑器。


2. 前缀键。各类 vim 插件帮助文档中经常出现 <leader>，即，前缀键。vim大量快捷键出现在单层空间中难免引起冲突，为缓解该问题，引入了前缀键 <leader>，这样，键 r 可以配置成 r、<leader>r、<leader><leader>r 等等多个快捷键。前缀键是 vim 使用率较高的一个键（最高的当属 Esc），选一个最方便输入的键作为前缀键，将有助于提高编辑效率。找个无须眼睛查找、无须移动手指的键 —— 分号键，挺方便的。

		" 定义快捷键的前缀，即<Leader>
		let mapleader=";"

3. 文件类型侦测。允许基于不同语言加载不同插件（如，C++ 的语法高亮插件与 python 的不同）：

		" 开启文件类型侦测
		filetype on
		" 根据侦测到的不同类型加载对应的插件
		filetype plugin on

很多插件不仅要在 .vimrc 中添加各自特有的配置信息，还要增加 vim 自身的配置信息。

vim 插件目前分为 *.vim 和 *.vba 两类，前者是传统格式的插件，实际上就是一个文本文件，通常 someplugin.vim（插件脚本）与 someplugin.txt（插件帮助文件）并存在一个打包文件中，解包后将 someplugin.vim 拷贝到 ~/.vim/plugin/ 目录，someplugin.txt 拷贝到 ~/.vim/doc/ 目录即可完成安装，重启 vim 后刚安装的插件就已经生效，但帮助文件需执行 :helptags ~/.vim/doc/ 才能生效，可通过 :h someplugin 查看插件帮助信息。传统格式插件需要解包和两次拷贝才能完成安装，相对较繁琐，所以后来又出现了 *.vba 格式插件，安装便捷，只需在 shell 中依次执行如下命令即可：

	vim someplugin.vba
	:so %
	:q

不论是直接拷贝插件到目录，还是通过 *.vba 安装，都不便于插件卸载、升级，后来又出现了管理插件的插件 pathogen，后文介绍。

pathogen 突破了 vim 只能识别 .vim/doc/、.vim/plugin/ 等等路径的限制，你可以在按插件名创建独立目录，然后将插件打包档提取至各自插件目录中。通常来说，你需要先创建 ~/.vim/bundle/ 目录，bundle/ 就是以后存放各插件目录的父目录。

使用：

1. 比如要安装新插件 plugin_name，先在 ~/.vim/bundle/ 下创建目录 plugin_name/，
2. 然后到 vim 官网下载 plugin_name 压缩包并解压至 ~/.vim/bundle/plugin_name/ 即可，注意不要重复包含多次 plugin_name/ 目录，如，~/.vim/bundle/plugin_name/plugin_name/。
3. 要卸载插件，直接删除 plugin_name/ 插件目录即可。另外，通过 pathogen 管理插件后，相较以前有几点变化：

通过 pathogen 管理插件后，相较以前有几点变化：

- 切勿通过发行套件自带的软件管理工具安装任何插件，不然 .vim/ 又要混乱了；
- pathogen 无法安装配色主题风格，只能将主题插件手工放置于 ~/.vim/colors/；
- 安装 *.vba 类型插件：

		:e plugin_name.vba 
		:!mkdir -p ~/.vim/bundle/plugin_name 
		:UseVimball ~/.vim/bundle/plugin_name 

- 生成帮助文档：
		
		:Helptags 

pathogen 无法安装主题插件，请将主题插件（仅 *.vim 文件而非插件目录，即，solarized.vim、molokai.vim、phd.vim）拷贝至 ~/.vim/colors/，然后在 .vimrc 中设定选用其作为主题：

	" 配色方案
	set background=dark
	colorscheme solarized

Linux下：vim 自身无法实现全屏，必须借助第三方工具 wmctrl，一个控制窗口 XYZ 坐标、窗口尺寸的命令行工具。先自行安装 wmctrl，再在 .vimrc 中增加如下信息：

	" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
	fun! ToggleFullscreen()
	    call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
	endf
	" 全屏开/关快捷键
	map <silent> <F11> :call ToggleFullscreen()<CR>
	" 启动 vim 时自动全屏
	autocmd VimEnter * call ToggleFullscreen()



Windows下：

首先下载该插件：gvimfullscreen.dll

把该dll文件放到安装目录下：C:\Program Files\Vim\vim73（默认目录）

为了让其在启动的时候能加载该插件，编辑vim配置文件，_vimrc该文件在C:\Program Files\Vim目录下。

编辑_vimrc在其中添加进去：


	if has('win32')
	map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>    #非插入模式下F11全屏
	imap <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>    #插入模式下F11全屏
	endif

保存退出，然后打开一个文件试试，按下F11键就能切换全屏。

代码折叠:
	
	操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠。


代码导航:

配置位于 ~/.vim/indexer_files，内容可以设定为：

	--------------- ~/.indexer_files ---------------
	[foo]
	/data/workplace/foo/src/
	[bar]
	/data/workplace/bar/src/

上例设定了两个工程的根目录，方括号内是对应工程名，路径末端节点最好细到代码目录以减少冗余信息（如，构建系统生成的很多中间文件）。这样，从以上目录打开任何代码文件时，indexer 便对整个目录创建标签文件，若代码文件有更新，那么在文件保存时，indexer 将自动调用 ctags 更新标签文件，并自动引入进 vim 中（indexer 生成的标签文件以工程名命名，位于 ~/.indexer_files_tags/）。

	
	把光标移到 main.cpp 的 one.printMsg() 那行的 printMsg 上，
	键入快捷键 g]，vim 将罗列出名为 printMsg 的所有标签候选列表，按需选择键入编号即可导航进入。


以后你只需先键入 ctrl-]，若没导航至需要的标签，再键入 <leader>tn 往后或者 <leader>tp 往前遍历即可。

可以键入 vim 快捷键 ctrl-t 返回，如果想再次进入，可以用前面介绍的方式，或者键入 ctrl-i。另外，注意，ctrl-o 以是一种返回快捷键，但与 ctrl-t 的返回不同，前者是返回上次光标停留行、后者返回上个标签。

标签列表

键入 <leader>tl，将在左侧的 tagbar 窗口中将可看到标签列表

内容查找

比如，我查找关键字 cnt，代码中，cnt 在 4 行出现过、64 行、128 行、1024 行都出现过，且每行内容均为
	
	++cnt;

这时，即便 grep.vim 或 ack.vim 在一个有四个选项的列表中为你罗列出相关行.

要查找某个关键字（如，yangyang），你可以想让光标定位在该关键字上面，然后命令模式下键入
	
	:CtrlSF
将自动提取光标所在关键字进行查找

为方便操作，我设定了快捷键：

" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
	
	nnoremap <Leader>sp :CtrlSF<CR>

避免手工键入命令的麻烦。查找结果将以子窗口在左侧呈现，不仅罗列出所有匹配项，而且给出匹配项的上下文。如果从上下文中你还觉得信息量不够，没事，可以键入 p 键，将在右侧子窗口中给出该匹配项的完整代码，而不再仅有前后几行。不想跳至任何匹配项，可以直接键入 q 退出 ctrlsf.vim；如果有钟意的匹配项，光标定位该项后回车，立即跳至新 buffer 中对应位置。

内容替换

有个名为 iFoo 的全局变量，被工程中 16 个文件引用过，不得不将该变量更名为 foo，怎么办？vim 有强大的内容替换命令：
	
	:[range]s/{pattern}/{string}/[flags]

在进行内容替换操作时，我关注几个因素：如何指定替换文件范围、是否整词匹配、是否逐一确认后再替换。

如何指定替换文件范围？

如果在当前文件内替换，[range] 不用指定，默认就在当前文件内；

如果在当前选中区域，[range] 也不用指定，在你键入替换命令时，vim 自动将生成如下命令：
	
	:'<,'>s/{pattern}/{string}/[flags]

你也可以指定行范围，如，第三行到第五行：
	
	:3,5s/{pattern}/{string}/[flags]

如果对打开文件进行替换，你需要先通过 :bufdo 命令显式告知 vim 范围，再执行替换；

如果对工程内所有文件进行替换，先 :args **/.cpp */*.h 告知 vim 范围，再执行替换；

是否整词匹配？{pattern} 用于指定匹配模式。如果需要整词匹配，则该字段应由 < 和 > 修饰待替换字符串（如，<iFoo>）；无须整词匹配则不用修饰，直接给定该字符串即可；

是否逐一确认后再替换？[flags] 可用于指定是否需要确认。若无须确认，该字段设定为 ge 即可；有时不见得所有匹配的字符串都需替换，若在每次替换前进行确认，该字段设定为 gec 即可。



代码开发

 快速开关注释

常用操作：

<leader>cc，注释当前选中文本，如果选中的是整行则在每行首添加 //，如果选中一行的部分内容则在选中部分前后添加分别 /、/；
<leader>cu，取消选中文本块的注释。


---
layout: post
title: "DLL学习笔记" 
comments: true
share: true
tags: 笔记
---



7月4日更新：

在VS中，要用一个dll，则可以：

1. 若该dll是你自己写的，且已经有一个工程了，则可以采用工程设置里添加引用的方式，把那个dll工程给引用到调用dll的工程上。
2. 第二种方法比较通用，在工程设置里选择:链接器--->附加依赖项--->把lib的文件名字添加上就行了(这就要求把lib给移动到工程目录下，也可以写全名)


对于动态链接库，DllMain是一个可选的入口函数。可以不包含DLLMain函数！

- DllMain在下面四种情况下会被调用：

- 当一个DLL文件被映射到进程的地址空间时，系统调用该DLL的DllMain函数；

- 当DLL被从进程的地址空间解除映射时，系统调用了它的DllMain；

- 当进程创建一线程时，系统查看当前映射到进程地址空间中的所有DLL文件映像，并用值DLL_THREAD_ATTACH调用DLL的DllMain函数；

- 如果线程调用了ExitThread来结束线程（线程函数返回时，系统也会自动调用ExitThread），系统查看当前映射到进程空间中的所有DLL文件映像，并用DLL_THREAD_DETACH来调用DllMain函数，通知所有的DLL去执行线程级的清理工作。

-------

4月24日的笔记，仅供参考，可能有大量错误。


C++中，要让导出的dll文件同时兼有.lib文件，需要define下

	#define DllExport extern "C" __declspec(dllexport)

然后在我们想让其余项目使用的函数前面加上 DllExport .

	遇到的一个问题：dll项目无法生成.lib文件
	(这个问题正常不会遇到)
	
	解决方案：
	
	添加.def文件


**动态链接库dynamic link library:**

包含了函数所在的DLL文件和文件中函数位置的信息(入口)，代码由运行时加载在进程空间中的DLL提供.

动态链接使用动态链接库，允许可执行模块(.dll文件或.exe文件)仅包含在运行时定位DLL函数的可执行代码所需的信息。



**静态链接库static link library:**

包含函数代码本身，在编译时直接将代码加入程序当中.

静态链接使用静态链接库，链接器从静态链接库LIB获取所有被引用函数，并将库同代码一起放到可执行文件中。


----------

关于lib和dll的区别如下：

　　(1)lib是编译时用到的，dll是运行时用到的。如果要完成源代码的编译，只需要lib;如果要使动态链接的程序运行起来，只需要dll。

　　(2)如果有dll文件，那么lib一般是一些索引信息，记录了dll中函数的入口和位置，dll中是函数的具体内容;如果只有lib文件，那么这个lib文件是静态编译出来的，索引和实现都在其中。使用静态编译的lib文件，在运行程序时不需要再挂动态库，缺点是导致应用程序比较大，而且失去了动态库的灵活性，发布新版本时要发布新的应用程序才行。

　　(3)**动态链接的情况下，有两个文件：一个是LIB文件，一个是DLL文件**。**LIB包含被DLL导出的函数名称和位置，DLL包含实际的函数和数据**，**应用程序使用LIB文件链接到DLL文件**。在应用程序的可执行文件中，存放的不是被调用的函数代码，而是DLL中相应函数代码的地址，从而节省了内存资源。DLL和LIB文件必须随应用程序一起发行，否则应用程序会产生错误。**如果不想用lib文件或者没有lib文件，可以用WIN32 API函数LoadLibrary、GetProcAddress装载。**

　　**使用lib需注意两个文件**：

　　(1)**.h头文件**，包含lib中说明输出的类或符号原型或数据结构。应用程序调用lib时，需要将该文件包含入应用程序的源文件中。

　　(2)**.LIB文件**，略。

　　**使用dll需注意三个文件**：

　　(1)**.h头文件**，包含dll中说明输出的类或符号原型或数据结构的.h文件。应用程序调用dll时，需要将该文件包含入应用程序的源文件中。

　　(2)**.LIB文件**，是dll在编译、链接成功之后生成的文件，作用是当其他应用程序调用dll时，需要将该文件引入应用程序，否则产生错误。如果不想用lib文件或者没有lib文件，可以用WIN32 API函数LoadLibrary、GetProcAddress装载。

　　(3)**.dll文件**，真正的可执行文件，# 开发成功后的应用程序在发布时，只需要有.exe文件和.dll文件，并不需要.lib文件和.h头文件 #。

### 　　使用lib的方法： ###

　　**静态lib中，一个lib文件实际上是任意个obj文件的集合，obj文件是cpp文件编译生成的。在编译这种静态库工程时，根本不会遇到链接错误;即使有错，也只会在使用这个lib的EXT文件或者DLL工程里暴露出来。**

　　在VC中新建一个static library类型的工程Lib，加入test.cpp文件和test.h文件(头文件内包括函数声明)，然后编译，就生成了Lib.lib文件。

　　**别的工程要使用这个lib:**：

　　(1)**在project->link->Object/Library Module中加入Lib.lib文件(先查询工程目录，再查询系统Lib目录);或者在源代码中加入指令#pragma comment(lib, “Lib.lib”)。**

　　(2)**将Lib.lib拷入工程所在目录，或者执行文件生成的目录，或者系统Lib目录中**。

　　**(3)加入相应的头文件test.h**。

### 　　使用DLL的方法： ###

　　**使用动态链接中的lib**，不是obj文件的集合，即里面不会有实际的实现，它只是提供动态链接到DLL所需要的信息，这种lib可以在编译一个DLL工程时由编译器生成。

　　创建DLL工程的方法(略)。

----------

　　(1)隐式链接

　　第一种方法是：通过project->link->Object/Library Module中加入.lib文件(或者在源代码中加入指令#pragma comment(lib, “Lib.lib”))，并将.dll文件置入工程所在目录，然后添加对应的.h头文件。

	　　#include "stdafx.h"
	
	　　#include "DLLSample.h"
	
	　　#pragma comment(lib, "DLLSample.lib") //你也可以在项目属性中设置库的链接
	
	　　int main()
	
	　　{
	
	　　TestDLL(123); //dll中的函数，在DllSample.h中声明
	
	　　return(1);
	
	　　}

　　(2)显式链接

　　需要函数指针和WIN32 API函数LoadLibrary、GetProcAddress装载，使用这种载入方法，不需要.lib文件和.h头文件，只需要.dll文件即可(将.dll文件置入工程目录中)。

	　　#include
	
	　　#include //使用函数和某些特殊变量
	
	　　typedef void (*DLLFunc)(int);
	
	　　int main()
	
	　　{
	
	　　DLLFunc dllFunc;
	
	　　HINSTANCE hInstLibrary = LoadLibrary("DLLSample.dll");
	
	　　if (hInstLibrary == NULL)
	
	　　{
	
	　　FreeLibrary(hInstLibrary);
	
	　　}
	
	　　dllFunc = (DLLFunc)GetProcAddress(hInstLibrary, "TestDLL");
	
	　　if (dllFunc == NULL)
	
	　　{
	
	　　FreeLibrary(hInstLibrary);
	
	　　}
	
	　　dllFunc(123);
	
	　　std::cin.get();
	
	　　FreeLibrary(hInstLibrary);
	
	　　return(1);
	
	　　}

　　LoadLibrary函数利用一个名称作为参数，获得DLL的实例(HINSTANCE类型是实例的句柄)，通常调用该函数后需要查看一下函数返回是否成功，如果不成功则返回NULL(句柄无效)，此时调用函数FreeLibrary释放DLL获得的内存。

　　GetProcAddress函数利用DLL的句柄和函数的名称作为参数，返回相应的函数指针，同时必须使用强转;判断函数指针是否为NULL，如果是则调用函数FreeLibrary释放DLL获得的内存。此后，可以使用函数指针来调用实际的函数。

　　最后要记得使用FreeLibrary函数释放内存。

　　注意：应用程序如何找到DLL文件？

　　使用LoadLibrary显式链接，那么在函数的参数中可以指定DLL文件的完整路径;如果不指定路径，或者进行隐式链接，Windows将遵循下面的搜索顺序来定位DLL：

　　(1)包含EXE文件的目录

　　(2)工程目录

　　(3)Windows系统目录

　　(4)Windows目录

　　(5)列在Path环境变量中的一系列目录

　　.h头文件是编译时必须的，**lib是链接时需要的**，dll是运行时需要的。

　　**附加依赖项的是.lib**不是.dll，若生成了DLL,则肯定也生成 LIB文件。如果要完成源代码的编译和链接，有头文件和lib就够了。如果也使动态连接的程序运行起来，有dll就够了。在开发和调试阶段，当然最好都有。

　　.h .lib .dll三者的关系是：

　　H文件作用是:声明函数接口

　　DLL文件作用是: 函数可执行代码

　　当我们在自己的程序中引用了一个H文件里的函数,编链器怎么知道该调用哪个DLL文件呢?这就是LIB文件的作用: 告诉链接器 调用的函数在哪个DLL中，函数执行代码在DLL中的什么位置 ，这也就是为什么需要附加依赖项 .LIB文件，它起到桥梁的作用。如果生成静态库文件，则没有DLL ，只有lib，这时函数可执行代码部分也在lib文件中

　　目前以lib后缀的库有两种，一种为静态链接库(Static Libary，以下简称“静态库”)，另一种为动态连接库(DLL，以下简称“动态库”)的导入库(Import Libary，以下简称“导入库”)。
    
   静态库是一个或者多个obj文件的打包 ，所以有人干脆把从obj文件生成lib的过程称为Archive，即合并到一起。比如你链接一个静态库，如果其中有错，它会准确的找到是哪个obj有错，即静态lib只是壳子。

   动态库一般会有对应的导入库，方便程序静态载入动态链接库 ，否则你可能就需要自己LoadLibary调入DLL文件，然后再手工GetProcAddress获得对应函数了。有了导入库，你只需要链接导入库后按照头文件函数接口的声明调用函数就可以了。导入库和静态库的区别很大，他们实质是不一样的东西。静态库本身就包含了实际执行代码、符号表等等，而对于导入库而言，其实际的执行代码位于动态库中，导入库只包含了地址符号表等，确保程序找到对应函数的一些基本地址信息。



　　静态库和共享库都是一个obj文件的集合 ，但静态链接后，执行程序中存在自己所需obj的一份拷贝，而动态链接后，执行程序仅仅是包含对共享库的一个引用。共享库相当于一个由多个obj文件组合而成的obj文件，在链接后其所有代码被加载，不管需要的还是不需要的。

　　似乎可以得出一个结论：

　　静态链接后的程序比动态链接的所用存储空间大，因为执行程序中包含了库中代码拷贝;

　　而动态链接的程序比静态链接的所用的运行空间大，因为它将不需要的代码也加载到运行空间。

　

　　如果是某个程序中调用了一个动态库(通过header文件，lib+dll来调用)，则对动态库的某个函数的内容修改了，但接口不改，则调用此动态库的程序需重新编译连接吗？如果是通过loadlibary动态加载，需要重新编译连接吗？

　　我的答案：不需要重新编译 接口不变的话 .lib都不用更新



　　若一个软件系统使用了dll,则该dll被改变(函数名不变)时，系统升级只需要更换此dll即可，不需要重新编译整个系统。事实上，很多软件都是以这种方式升级的。例如我们经常玩的星际、魔兽等游戏也是这样进行版本升级的。

　　Dll库可以供多种编程语言使用，例如用c编写的dll可以在vb中调用。这一点上DLL还做得很不够，因此在dll的基础上发明了COM技术，更好的解决了一系列问题。




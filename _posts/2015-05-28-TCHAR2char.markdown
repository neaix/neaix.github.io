---
layout: post
title: "Windows下的宽字符和多字节字符问题汇总" 
comments: true
share: true
tags: 笔记
---


## 各类字符编码基本知识： ##

#### ASCII(American Standard Code for Information Interchange)： ####

美国信息交换标准代码，这是计算机上最早使用的通用的编码方案。这种编码占用7个Bit，在计算机中占用一个字节，8位，最高位没用，通讯的时候有时用作奇偶校验位。因此ASCII编码的取值范围实际上是：0x00-0x7f,只能表示128个字符。后来发现128个不太够用，做了扩展，叫做ASCII扩展编码，用足八位，取值范围变成：0x00-0xff,能表示256个字符。其实这种扩展意义不大，因为256个字符表示一些非拉丁文字远远不够，但是表示拉丁文字，又用不完。所以扩展的意义还是为了下面的ANSI编码服务。

####   ANSI（American National Standard Institite ）：  ####

美国国家标准协会，也就是说，每个国家（非拉丁语系国家）自己制定自己的文字的编码规则，并得到了ANSI认可，符合ANSI的标准，全世界在表示对应国家文字的时候都通用这种编码就叫ANSI编码。换句话说，中国的ANSI编码和在日本的ANSI的意思是不一样的，因为都代表自己国家的文字编码标准。比如**中国的ANSI对应就是GB2312标准**，日本就是JIT标准，香港，台湾对应的是BIG5标准等等。当然这个问题也比较复杂，微软从95开始，用就是自己搞的一个标准GBK。GB2312里面只有6763个汉字，682个符号，所以确实有时候不是很够用。GBK一直能和GB2312相互混淆并且相安无事的一个重要原因是GBK全面兼容GB2312，所以没有出现任何冲突，你用GB2312编码的文件通过GBK去解释一定能获得相同的显示效果！


ASCII码在任何ANSI中应该都是相同的。其他的，你们自己扩展。所以呢，中国人就把ASCII码变成8位，0x7f之前我不动你的，我从0xa0开始编，0xa0到0xff才95个码位，对于中国字那简直是杯水车薪，因此，就用两个字节吧，因此编码范围就从0xA1A1 - 0xFEFE，这个范围可以表示23901个汉字。基本够用了吧，GB2312才7000多个呢！GBK更猛，编码范围是从0x8140 - 0xFEFE,可以表示3万多个汉字。可以看出，这两种方案，都能保证汉字头一个字节在0x7f以上，从而和ASCII不会发生冲突。能够实现英文和汉字同时显示。

那么到底ANSI是多少位呢？这个不一定！比如在GB2312和GBK，BIG5中，是两位！但是其他标准或者其他语言如果不够用，就完全可能不止两位！

搞懂了ANSI的含义，我们发现ANSI有个致命的缺陷，就是每个标准是各自为阵的，不保证能兼容。换句话说，要同时显示中文和日本文或者阿拉伯文，就完全可能会出现一个编码两个字符集里面都有对应，不知道该显示哪一个的问题，也就是编码重叠的问题。显然这样的方案不好，所以Unicode才会出现！

####  MBCS（Multi-Byte Chactacter System（Set ) ） ####

**多字节字符**系统或者字符集，基于ANSI编码的原理上，对一个字符的表示实际上无法确定他需要占用几个字节的，只能从编码本身来区分和解释。因此计算机在存储的时候，就是采用多字节存储的形式。也就是你需要几个字节我给你放几个字节，比如A我给你放一个字节，比如"中“，我就给你放两个字节，这样的字符表示形式就是MBCS。

C语言默认存放字符串就是用的MBCS格式。从原理上来说，这样是非常经济的一种方式。


#### Unicode(Universal Code)： ####

这是一个编码方案，说白了就是一张包含全世界所有文字的一个编码表，不管你用的上，用不上，不管是现在用的，还是以前用过的，只要这个世界上存在的文字符号，统统给你一个唯一的编码，这样就不可能有任何冲突了。不管你要同时显示任何文字，都没有问题。

因此在这样的方案下，Unicode出现了。Unicode编码范围是：0-0x10FFFF，可以容纳1114112个字符，100多万啊。

因此从码位范围看，严格的unicode需要3个字节来存储。但是考虑到理解性和计算机处理的方便性，理论上还是用4个字节来描述。

Unicode的实现方案：

（1）UTF-8（UCS Transformation Format 8bit)

这个方案的意思以8位为单位来标识文字，注意并不是说一个文字用8位标识。他其实是一种MBCS方案，可变字节的。到底需要几个字节表示一个符号，这个要根据这个符号的unicode编码来决定，最多4个字节。

编码规则如下：

	Unicode编码(16进制) ║UTF-8 字节流(二进制)
	000000 - 00007F　  ║　0xxxxxxx 　　
	000080 - 0007FF　  ║　110xxxxx 10xxxxxx 　　
	000800 - 00FFFF　  ║　1110xxxx 10xxxxxx 10xxxxxx 　　
	010000 - 10FFFF　  ║　11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 　　

UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。

UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。 　
　

（2）UTF-16

 UTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode


（3）UTF-32
 这个就简单了，和Unicode码表基本一一对应，固定四个字节。
 为什么不采用UTF-32呢，因为unicode定义的范围太大了，其实99%的人使用的字符编码不会超过2个字节，所以如同统一用4个字节，简单倒是简单了，但是数据冗余确实太大了，不好，所以16位是最好的。就算遇到超过16位能表示的字符，我们也可以通过上面讲到的代理技术，采用32位标识，这样的方案是最好的。所以现在绝大部分机器实现unicode还是采用的utf-16的方案。当然也有UTF-8的方案。比如windows用的就是UTF16方案，不少linux用的就是utf8方案。

#### CodePage ####
  
因为ANSI编码每个国家都不统一，不兼容，可能导致冲突，所以一个系统在处理文字的时候，必须要告诉计算机你的ANSI是哪个国家和地区的标准，这种国家和标准的代号（其实就是字符编码格式的代号），微软称为Codepage代码页，其实这个代码页和字符集编码的意思是一样的。告诉你代码页，本质就是告诉了你编码格式。

但是不同厂家的代码页可能是完全不同，哪怕是同样的编码，比如， UTF-8字符编码 在IBM对应的代码页是1208，在微软对应的是65001,在德国的SAP公司对应的是 4110 。




----------

各类字符类型名字在多字节字符下和Unicode下对应含义：

	type                Meaning in MBCS builds          Meaning in Unicode builds 
	WCHAR                   wchar_t                           wchar_t 
	LPSTR                   char*                             char*
	LPCSTR                  const char*                       const char*
	LPWSTR                  wchar_t*                          wchar_t* 
	LPCWSTR                 const wchar_t*                    const wchar_t*  
	TCHAR                   char                              wchar_t 
	LPTSTR                  TCHAR*                            TCHAR* 
	LPCTSTR                 const TCHAR*                      const TCHAR*

由此可见：在Unicode下，WCHAR和TCHAR以及LPWSTR的类型是一样的，都是wchar_t！
	
	typedef wchar_t WCHAR;

wchar_t是C/C++的字符数据类型，是一种扩展的字符存储方式。

	WCHAR（即wchar_t） 有 16bit
	
	char 有 8bit

WCHAR与char的长度不一样，所以就不能直接进行强制的指针转换。

另外，"xxx"前加个 L 能够让编译器以宽字符保存这个字符串,如下：
	
	L"Title"

----------



宽字符对应多字节字符的操作函数列表：


**字符分类：**

	宽字符函数	普通C函数	描述
	iswalnum()	isalnum()	测试字符是否为数字或字母
	iswalpha()	isalpha()	测试字符是否是字母
	iswcntrl()	iscntrl()	测试字符是否是控制符
	iswdigit()	isdigit()	测试字符是否为数字
	iswgraph()	isgraph()	测试字符是否是可见字符
	iswlower()	islower()	测试字符是否是小写字符
	iswprint()	isprint()	测试字符是否是可打印字符
	iswpunct()	ispunct()	测试字符是否是标点符号
	iswspace()	isspace()	测试字符是否是空白符号
	iswupper()	isupper()	测试字符是否是大写字符
	iswxdigit()	isxdigit()	测试字符是否是十六进制的数字


**大小写转换:**
 
 
	宽字符函数	普通C函数	描述
	towlower()	tolower()	把字符转换为小写
	towupper()	toupper()	把字符转换为大写


**字符比较:**
 
 
	宽字符函数	普通C函数	描述
	wcscoll()	strcoll()	比较字符串


**字符比较:**
 
	宽字符函数	普通C函数	描述
	wcscoll()	strcoll()	比较字符串

**打印和扫描字符串:**

	宽字符函数				描述
	fprintf()/fwprintf()	使用vararg参量的格式化输出
	fscanf()/fwscanf()		格式化读入
	printf()				使用vararg参量的格式化输出到标准输出
	scanf()					从标准输入的格式化读入
	sprintf()/swprintf()	根据vararg参量表格式化成字符串
	sscanf()				以字符串作格式化读入
	vfprintf()/vfwprintf()	使用stdarg参量表格式化输出到文件
	vprintf()				使用stdarg参量表格式化输出到标准输出
	vsprintf()/vswprintf()	格式化stdarg参量表并写到字符串

**数字转换:**

	宽字符函数	普通C函数	描述
	wcstod()	strtod()	把宽字符的初始部分转换为双精度浮点数
	wcstol()	strtol()	把宽字符的初始部分转换为长整数
	wcstoul()	strtoul()	把宽字符的初始部分转换为无符号长整数

**多字节字符和宽字符转换及操作:**
 
	宽字符函数	描述
	mblen()	根据locale的设置确定字符的字节数
	mbstowcs()	把多字节字符串转换为宽字符串
	mbtowc()/btowc()	把多字节字符转换为宽字符
	wcstombs()	把宽字符串转换为多字节字符串
	wctomb()/wctob()	把宽字符转换为多字节字符
 
**输入和输出:**
 
	宽字符函数	普通C函数	描述
	fgetwc()	fgetc()		从流中读入一个字符并转换为宽字符
	fgetws()	fgets()		从流中读入一个字符串并转换为宽字符串
	fputwc()	fputc()		把宽字符转换为多字节字符并且输出到标准输出
	fputws()	fputs()		把宽字符串转换为多字节字符并且输出到标准输出串
	getwc()		getc()		从标准输入中读取字符, 并且转换为宽字符
	getwchar()	getchar()	从标准输入中读取字符, 并且转换为宽字符
	None		gets()		使用fgetws()
	putwc()		putc()		把宽字符转换成多字节字符并且写到标准输出
	putwchar()	getchar()	把宽字符转换成多字节字符并且写到标准输出
	None		puts()		使用fputws()
	ungetwc()	ungetc()	把一个宽字符放回到输入流中
 
**字符串操作:**
 
	宽字符函数	普通C函数	描述
	wcscat()	strcat()	把一个字符串接到另一个字符串的尾部
	wcsncat()	strncat()	类似于wcscat(), 而且指定粘接字符串的粘接长度.
	wcschr()	strchr()	查找子字符串的第一个位置
	wcsrchr()	strrchr()	从尾部开始查找子字符串出现的第一个位置
	wcspbrk()	strpbrk()	从一字符字符串中查找另一字符串中任何一个字符第一次出现的位置
	wcswcs()/wcsstr()	strchr()在一字符串中查找另一字符串第一次出现的位置
	wcscspn()	strcspn()	返回不包含第二个字符串的的初始数目
	wcsspn()	strspn()	返回包含第二个字符串的初始数目
	wcscpy()	strcpy()	拷贝字符串
	wcsncpy()	strncpy()	类似于wcscpy(), 同时指定拷贝的数目
	wcscmp()	strcmp()	比较两个宽字符串
	wcsncmp()	strncmp()	类似于wcscmp(), 还要指定比较字符字符串的数目
	wcslen()	strlen()	获得宽字符串的数目
	wcstok()	strtok()	根据标示符把宽字符串分解成一系列字符串
	wcswidth()	None		获得宽字符串的宽度
	wcwidth()	None		获得宽字符的宽度
	
----------

## TCHAR类型相关函数： ##

标准输入输出

printf类

	_tprintf : 类同printf
	_tprintf_l : 类同printf, 但是"_l"表示第二个参数是一个locale.
	locale是操作系统对语言设定的参数, 这个会影响ANSI字符的语言识别, 在Unicode下应该是无差别的
	_tprintf_s : 类图printf, 但是和_tprintf相比, _tprintf_s多会做一些检查工作.

如果你的"format string"是动态的, 这个能帮助你.

	_tprintf_s_l  : 前两者功能相加
	_tprintf_p : 这个用法有点特别, 不过有个例子, 一看就明白
	//_tprintf_p(TEXT("%1$d times %1$d is %2$d"), 10, 100);
	//输出：10 times 10 is 100


_ftprintf : f表示输出到文件

_stprintf : s表示输出到string


_tprintf(TEXT("String Length of %d is %d"), 100, _sctprintf(TEXT("%d"), 100));
输出：String Length of 100 is 3

前缀
_t  
_ft 输出到文件
_st 输出到string

后缀 
_p 可以用数字表示参数
_l 可以值得locale
_s 多了一些检查

scanf类和printf类类似, 但是没有_v类

剩下来的函数基本上都类似, 大多数能够在c的标准库中找到类似的函数.
每一类中我只举几个典型的函数, _l 和_s后缀是经常可以用的~

get 和 put:
_gettc 我要get一个char
_getts 我要get一个string
_puttc, _putts类似

_gettch 我从终端来一个char
_cgetts 我从终端来一个string
_gettche 我从终端来一个char, 顺便输出
_fgettc 我从文件来个char~

string 向数值转换
_tstof string变浮点
_tstol string变长整
_tstoi string变整数
_itot 整数变string

string函数
_tcscat strcat
_tcsncat strncat
_tcscpy strcpy
_tcsncpy strncpy 
_tcslen strlen 
_tcscmp strcmp
_tcsncmp strncmp

----------

## 通用版本的**宽字符**到**多字节字符**转换 ##

在Windows/Linux系统中都可以使用：

所需头文件：stdlib.h


#### (1) mbstowcs()  把多字节字符转换成宽字符 ####

原型： 

	size_t mbstowcs(
	   wchar_t *wcstr,
	   const char *mbstr,
	   size_t count 
	);

参数：

1> wcstr 目标缓存，用来存放转换之后的宽字节字符；当取值为NULL时，返回值为目标缓存所需wchar_t类型的个数

2> mbstr 用来存放待转换的多字节字符串

3> count 用来指定最多转换多少Byte。当wcstr取值为NULL时，该值无用

返回值：

转换成功，且wcstr == NULL时，返回目标缓存所需的大小（wchar_t 类型个数，但不含终结符）；

转换成功，且wcstr != NULL时，返回转换的字节数；

转换不成功，返回(size_t) (-1)；

使用步骤：

1) 调用mbstowcs()函数，设置参数 wcstr 为NULL（用以获取转换所需的接收缓冲区大小）；

2) 给目标缓存区分配足够的内存块，用于存放转换后的wchar_t字符串；

注意：该内存块的大小由首次调用mbstowcs()函数的返回值来决定（该返回值不包含终止符的空间）

3) 再次调用mbstowcs()函数，这次将目标缓存的地址作为 wcstr 参数来传递；

代码示例：

	strcpy(sBuf, "我最棒");  
	size_t sSize=strlen(sBuf);  
	  
	wchar_t * dBuf=NULL;  

	//注意：需要多分配一个空间，以存放终止符</span>  
	int dSize=mbstowcs(dBuf, sBuf, 0)+1;  
  
	dBuf=new wchar_t[dSize];  
	wmemset(dBuf, 0, dSize);  
	  
	int nRet=mbstowcs(dBuf, sBuf, sSize);  
	if(nRet<=0)  
	{  
	    printf("转换失败\n");  
	}  
	else  
	{  
	    printf("转换成功%d字符\n", nRet);  
	    wprintf(L"%ls\n", dBuf);  
	}  

( 2 ) wcstombs() 把宽字符把转换成多字节字符串

原型：

	size_t wcstombs(
	   char *mbstr,
	   const wchar_t *wcstr,
	   size_t count 
	);

参数：

1> wcstr 目标缓存，用来存放转换之后的多字节字符；当取值为NULL时，返回值为目标缓存所需wchar_t类型的个数；

2> mbstr 用来存放待转换的宽字符；

3> count 用来指定接收缓存里能够存储的最大的字节数；

返回值：

转换成功，且mbstr == NULL时，返回目标缓存所需的大小（char 类型个数，但不含终结符）；

转换成功，且mbstr != NULL时，返回转换的字节数；

转换不成功，返回(size_t)(-1)；

注意：

 If wcstombs encounters a wide character it cannot be convert to a multibyte character, it returns –1 cast to type size_t.

使用方法：

与mbstowcs()方法类似

示例代码：


	wchar_t sBuf[20]={0};  
	wcscpy(sBuf, L"Hello");  
	size_t sSize=wcslen(sBuf);  
	  
	  
	char * dBuf=NULL;  
	  
	  
	int dSize=wcstombs(dBuf, sBuf, 0)+1;  
	printf("需要%d Char\n", dSize);  
	  
	dBuf=new char[dSize];  
	memset(dBuf, 0, dSize);  
	  
	  
	int nRet=wcstombs(dBuf, sBuf, dSize);  
	  
	if(nRet<=0)  
	{  
	    printf("转换失败\n");  
	}  
	else  
	{  
	    printf("转换成功%d字符\n", nRet);  
	    printf("%s\n", dBuf);  
	}  

**上面的代码在转换英文的时候没有问题，在转换中文时，wcstombs()函数会返回-1**

注意：

宽字节，即wchar_t 类型采用Unicode编码方式，**在Windows中为utf-16，在Linux中为utf-32**

而多字节则可能是其他很多编码方式，如utf-8、GB232....

因此，需要指定多字节编码类型，才能进行正常的转换过程。

设置或获取多字节编码方式用函数：

	setlocale()
	
	所需头文件：locale.h
	
	#include <locale.h>


----------


#### TCHAR与char之间转换 ####

**1. ANSI -> Unicode：**

以下方法亲试可行：



	int WideCharToMultiByte(
	  __in   UINT CodePage,   // 标志了要与新转换的字符串关联的代码页
	  __in   DWORD dwFlags,   // 制定额外的转换控制，一般不需要进行这种程度的控制，而为 dwFlag 传入 0
	  __in   LPCWSTR lpWideCharStr, // 指定要转换的字符串的内存地址
	  __in   int cchWideChar,       // 指出该字符串的长度，如果传入 -1 ，则由函数来判断字符串的长度
	  __out  LPSTR lpMultiByteStr,  // 转换后的缓冲区，设为NULL则不需要
	  __in   int cbMultiByte,       // 指定 lpMultiByteStr 缓冲区的最大大小（字节数），如果传入 0 ，函数返回该目标缓冲区需要的大小
	  __in   LPCSTR lpDefaultChar,  	//可为NULL
	  __out  LPBOOL lpUsedDefaultChar // 宽字符字符串中，如果至少有一个字符不能转换为对应的多字节形式，函数就会把这个变量设为 TRUE 。如果所有字符都能成功转换，就会把这个变量设为 FALSE。 通常将此函数传入 NULL 值。
	);

这里的CodePage参数一般为CP_ACP或CP_OEMCP：

	CP_ACP       ANSI codepage
	CP_OEMCP     OEM (original equipment manufacturer) codepage

CP_ACP 指示要使用的当前设置的 API 默认 Windows ANSI 代码页。CP_OEMCP 指示要使用的当前设置的 API 默认 OEM 代码页。（我们一般用第一个）

如果 Win32 ANSI Api 用于 Windows NT 系统中获取文件名，使用 CP_ACP 将转换字符串时。Windows NT 检索从物理设备的名称，并将 OEM 名称转换为 Unicode。Unicode 名称被转换成 ANSI 如果 ANSI API 调用，然后可将它翻译回使用 MultiByteToWideChar() 的 Unicode。

如果正在从 OEM 编码的文件检索的文件名，则使用 CP_OEMCP。



只有一个字符在 uCodePage 制定的代码页中没有对应的表示时，WideCharToMultiByte 才会使用后两个参数。在遇到一个不能转换的字符时，函数便使用 pDefaultChar 参数指向的字符。如果这个参数指向为 NULL ，函数就会使用一个默认的字符。这个默认的值通常是一个问号。这对文件操作是非常危险的，因为问号是一个通配符。


示例代码：

	/* 
	 * Subject: Convert Unicode to ANSI
	 * IDE: Visual Studio 2008
	 * Auther: http://www.cnblogs.com/chinazhangjie
	 * Mail: chinajiezhang@gmail.com
	 * Date:2011/10/10
	 */
 
	#include <stdio.h>
	#include <windows.h>
	 
	int main()
	{
	    wchar_t *pUnicode = TEXT("Convert Unicode to ANSI, Unicode 转换为 ANSI");
	    char    *pANSI    = NULL;
	    int      nByte     = 0;
	 
	    // step.1
	    nByte = WideCharToMultiByte(CP_ACP, 0, pUnicode, -1, NULL, 0, NULL, NULL);
	 
	    // step.2
	    pANSI = (char*)malloc(nByte);
	 
	    // step.3
	    WideCharToMultiByte(CP_ACP, 0, pUnicode, -1, pANSI, nByte, NULL, NULL);
	 
	    // step.4
	    printf_s("ANSI = %s\n", pANSI);
	 
	    // step.5
	    free(pANSI);
	 
	    return 0;
	}


参考：[http://www.cnblogs.com/chinazhangjie/archive/2011/10/10/2205878.html](http://www.cnblogs.com/chinazhangjie/archive/2011/10/10/2205878.html "http://www.cnblogs.com/chinazhangjie/archive/2011/10/10/2205878.html")



之前还尝试过：

			/*_ftprintf(fileOut,_T("%s"),strFile);只能输出中文乱码的字*/

			//char *fullName = wch2chr(strFile);
			//FILE *fileIn = fopen(fullName, "r");
			///*fputs(fullName, fileOut);*/
			//fread(fullName, sizeof(fullName), 1, fileOut);
			//仍旧乱码




**2. Unicode->ANSI：**

	int MultiByteToWideChar(
	  __in   UINT CodePage, // 标识了与多字节关联的一个代码页值
	  __in   DWORD dwFlags, // 允许我们进行额外的控制，它会影响带变音符号（比如重音）的字符。但是一般情况下不适用，赋为 0 即可。
	  __in   LPCSTR lpMultiByteStr, // 参数指定要转换的字符串
	  __in   int cbMultiByte,       // 指定要转换串长度的长度（字节数），如果参数值是-1，函数便可自动判断源字符串的长度
	  __out  LPWSTR lpWideCharStr,  // 指定转换后Unicode版本的字符串内存地址
	  __in   int cchWideChar        // 指定 lpWideCharStr 缓冲区的最大长度。
	                                // 如果传入0，函数不会进行转换，而是返回一个宽字符数（包括终止字符'\0'），
	                // 只有当缓冲区能够容纳该数量的宽字符时，转换才会成功。
	);

转换步骤：

（1）调用 MultiByteToWideChar，为 pWideCharStr 参数传入 NULL， 为cchWideChar 参数传入 0，为 cbMultiByte 参数传入 -1 。

（2）分配一块足以容纳转换后的 Unicode 字符串的内容。它的大小是上一个 MultiByteToWideChar 调用的返回值乘以 sizeof(wchar_t) 。

（3）再次调用MultiByteToWideChar，这一次将缓冲区地址作为 pWideCharStr 参数的值传入，将第一次 MultiByteToWideChar 调用的返回值乘以 sizeof(wchar_t) 后得到大小作为 cchWideChar 参数的值传入。

（4）使用转换后的字符串

（5）释放 Unicode 字符串占用的内存块。

示例代码：
	/* 
	 * Subject: Convert ANSI to Unicode
	 * IDE: Visual Studio 2008
	 * Auther: http://www.cnblogs.com/chinazhangjie
	 * Mail: chinajiezhang@gmail.com
	 * Date:2011/10/10
	 */
	 
	#include <stdio.h>
	#include <windows.h>
	 
	int main()
	{
	    char *pANSI = "ANSI to Unicode, ANSI 转换到 Unicode";
	    wchar_t *pUnicode = NULL;
	    int nWideCharLen = 0;
	 
	    // step.1
	    nWideCharLen = MultiByteToWideChar(CP_ACP, 0, pANSI, -1, NULL, 0);
	    printf("nWideCharLen = %d\n", nWideCharLen);
	 
	    // step.2
	    pUnicode = (wchar_t*)malloc(nWideCharLen * sizeof(wchar_t));
	 
	    // step.3
	    MultiByteToWideChar(CP_ACP, 0, pANSI, -1, pUnicode, nWideCharLen * sizeof(wchar_t));
	 
	    // step.4
	    MessageBoxW(NULL, pUnicode, TEXT("Unicode"), 0);
	 
	    // step.5
	    free(pUnicode);
	 
	    return 0;
	}


----------


## Cstring 和 string 和 char * 之间关系： ##

CString是属于MFC的类。而一些标准C/C++库函数是不能直接对CString类型进行操作的。

在Unicode下，CString是WCHAR的，但string还是CHAR的.转换的时候要当心。

1. CString和string的转化<br>

		string str="ksarea";
		CString cstr(str.c_str());//或者CString cstr(str.data());初始化时才行
		cstr=str.c_str();或者cstr=str.data();

		str=cstr.GetBuffer(0); //CString -> string
		str = LPCSTR(cstr); //CString->string

		cstr.format("%s", str.c_str()); //string->CString
		cstr.format("%s", str.data()); //string->CString

		/*c_str()和data()区别是：前者返回带'/0'的字符串，后者则返回不带'/0'的字符串*/


2. CString和int的转换<br>

		int i=123;
		CString str;
		str.format("%d",i);//int->CString 其他的基本类型转化类似
		i=atoi(str);//CString->int 还有(atof,atol)

3. char*和CString的转换

		CString cstr="ksarea";
		char* ptemp=cstr.getbuffer(0);
		char* str;
		strcpy(str,ptemp);//CString->char*
		cstr.releasebuffer(-1);
		
		char* str="lovesha";
		CStringcstr=str;//char*->CString string类型不能直接赋值给CString

对于CString与其他类型的转化方法很多，但其实都殊途同归，朝着一个方向即将类型首先转化为char*类型，因为char*是不同类型之间的桥梁。得到char*类型，转化为其他类型就非常容易了。

参考资料：[http://blog.csdn.net/bitxinhai/article/details/2292014](http://blog.csdn.net/bitxinhai/article/details/2292014 "http://blog.csdn.net/bitxinhai/article/details/2292014")


------

## string、wstring、cstring、 char、 tchar、int转换方法： ##

（自己写函数)

1、string转wstring

	wstring s2ws(const string& s)
	{
	 _bstr_t t = s.c_str();
	 wchar_t* pwchar = (wchar_t*)t;
	 wstring result = pwchar;
	 return result;
	}

2、wstring转string

	string ws2s(const wstring& ws)
	{
	 _bstr_t t = ws.c_str();
	 char* pchar = (char*)t;
	 string result = pchar;
	 return result;
	}

3、string转cstring

方法一、

	CString str;
	string  str1; 
	str.format("%s", str1.c_str());

方法二、

	CString str;
	string  str1;
	str = str1.c_str();

方法三、

	  CString StringToCString(string str)
	 {
	    CString result;
	    for (int i=0;i<(int)str.length();i++)
	    {
	      result+=str[i];
	    }
	  return result;
	 }

4、cstring转string

方法一、

	void ConvertCString2string(CString& strSrc,std::string& strDes)
	{
	#ifndef UNICODE
	 strDes = strSrc;
	#else USES_CONVERSION;
	 strDes = W2A(strSrc.LockBuffer());
	 strSrc.UnlockBuffer();
	#endif
	}

方法二、

    CString str3;
    string s(str3.GetBuffer());  
    str3.ReleaseBuffer();
 
GetBuffer()后一定要ReleaseBuffer(),否则就没有释放缓冲区所占的空间.

方法三、

	string CStringToString(CString cstr)
	{
	   string result(cstr.GetLength(),'e');
	   for (int i=0;i<cstr.GetLength();i++)
	   {
	     result[i]=(char)cstr[i];
	   }
	  return result;
	}
5、string转char *

方法一、
		string str1="Hello";
        char *str2=const_cast<char*>(str1.c_str());
 
方法二、

		string mngName；
		 
	    char t[200]; 
	 
	   	memset(t,0,200); 
	 
	  	strcpy(t,mngName.c_str());

方法三、
一个一个字符的赋值

     char *p = new char[sring的长度+1];
     p[string的长度]='/0';

但是要注意最后赋值'/0'!!!

	char * StringToChar(string &str)
	{
	         int len=str.length();
	         char * p= new char[len+1];
	         for (int i=0;i<len;i++)
	         {
	               p[i]=str[i];
	         } 
	        p[len]='/0';
	 
	}
6、char* 转string
	string s(char *); 你的只能初始化，在不是初始化的地方最好还是用assign()；
	string CharToString(char*arr,int count)
	{
		string result(arr,4);
		return result;
	}

string是ansi编码字符char
TCHAR是unicode编码字符wchar_t

7、string转TCHAR *

	/* wBuf 申明为指针即可。*/
	wchar_t *chr2wch(const char *buffer)
	{
	        size_t len = strlen(buffer);
	        size_t wlen = MultiByteToWideChar(CP_ACP, 0, (const char*)buffer, int(len), NULL, 0);
	        wchar_t *wBuf = new wchar_t[wlen + 1];
	        MultiByteToWideChar(CP_ACP, 0, (const char*)buffer, int(len), wBuf, int(wlen));
	        return wBuf;
	}
8、TCHAR *转string

	char * wch2chr(LPCTSTR lpString)
	{
	UINT len = wcslen(lpString)*2;
	char *buf = (char *)malloc(len);
	UINT i = wcstombs(buf,lpString,len);
	return buf;
	}
9、string 和 char* 转int

string 转 int
 
方法一、
	string s = "0xffff"; 
	int t =0; 
	sscanf(s.c_str(),"%x",&t); 
 
方法二、
	string str = "0xffff"; 
    long t =0; 
    t = strtol(str.c_str(), NULL, 16); 
 
 
char* 转 int

	 #include <stdlib.h> 
	  
	 int atoi(const char *nptr); 
	 long atol(const char *nptr); 
	 long long atoll(const char *nptr); 
	 long long atoq(const char *nptr); 

10、int转char*和string

在stdlib.h中有个函数itoa() 

itoa的用法： 

	itoa(i,num,10); 
	
	i 需要转换成字符的数字 
	num 转换后保存字符的变量

11、wstring转Csting

	std::wstring转CString
	CString str( filename.c_str() );

12、Cstring转wstring

方法一、

	CString orig("Hello, World!");
	size_t origsize = strlen(orig) + 1;
	size_t convertedChars = 0;
	wchar_t wcstring[MAX_PATH];
	mbstowcs_s(&convertedChars, wcstring, origsize, orig, _TRUNCATE);
	wcscat_s(wcstring, L" (wchar_t *)");

方法二、

	CString str = _T("1234"); 
	std::wstring wstr = (LPCWSTR)CStringW(str);

13、Cstring转char *

方法一、


	CString str("aaaaa");
	char *p = (LPSTR)(LPCTSTR)str;

方法二、


	CString   str= "i   am   good "; 
	char*   lp=str.GetBuffer(str.GetLength()); 
	str.ReleaseBuffer();

14、char *转Cstring

方法一、

	CString   str; 
	char   pStr[100]; 
	str.Format( "%s ",pStr);

方法二、

	CString str;
	    char *p = "hello";
	    str = p;

15、TCHar转char

*********************************************************************** 
* 函数： THCAR2Char 
* 描述：将TCHAR* 转换为 char* 
***********************************************************************

	char* THCAR2char(TCHAR* tchStr) 
	{ 
	int iLen = 2*wcslen(tchStr);//CString,TCHAR汉字算一个字符，因此不用普通计算长度 
	char* chRtn = new char[iLen+1] 
	wcstombs(chRtn,tchStr,iLen+1);//转换成功返回为非负值 
	return chRtn; 
	}

16、char转tchar

定义了UNICODE宏之后，TCHAR就是宽字符wchar_t，否则TCHAR跟char是一样的

以下摘录自网络：
..............................................................
《C++标准函数库》中说的  
有三个函数可以将字符串的内容转换为字符数组和C—string  
1、data(),返回没有”\0“的字符串数组  
2、c_str()，返回有”\0“的字符串数组  
3、copy() 


//将 单字节char* 转换为 宽字节 wchar*

	inline wchar_t* AnsiToUnicode( const char* szStr )
	{
	int nLen = MultiByteToWideChar( CP_ACP, MB_PRECOMPOSED, szStr, -1, NULL, 0 );
	if (nLen == 0)
	{
	   return NULL;
	}
	wchar_t* pResult = new wchar_t[nLen];
	MultiByteToWideChar( CP_ACP, MB_PRECOMPOSED, szStr, -1, pResult, nLen );
	return pResult;
	}


// 将 宽字节wchar_t* 转换 单字节char*


	inline char* UnicodeToAnsi( const wchar_t* szStr )
	{
	int nLen = WideCharToMultiByte( CP_ACP, 0, szStr, -1, NULL, 0, NULL, NULL );
	if (nLen == 0)
	{
	   return NULL;
	}
	char* pResult = new char[nLen];
	WideCharToMultiByte( CP_ACP, 0, szStr, -1, pResult, nLen, NULL, NULL );
	return pResult;
	}


// 将单字符 string 转换为宽字符 wstring


	inline void Ascii2WideString( const std::string& szStr, std::wstring& wszStr )
	{
	int nLength = MultiByteToWideChar( CP_ACP, 0, szStr.c_str(), -1, NULL, NULL );
	wszStr.resize(nLength);
	LPWSTR lpwszStr = new wchar_t[nLength];
	MultiByteToWideChar( CP_ACP, 0, szStr.c_str(), -1, lpwszStr, nLength );
	wszStr = lpwszStr;
	delete [] lpwszStr;
	}


const char * 转 LPCWSTR

	wchar_t *convertCharArrayToLPCWSTR(const char* charArray)
	{
	    wchar_t* wString=new wchar_t[4096];
	    MultiByteToWideChar(CP_ACP, 0, charArray, -1, wString, 4096);
	    return wString;
	}

char * 转 LPCWSTR

	LPCWSTR convertCharArrayToLPCWSTR(char* charArray)
	    {
	        const char* cs=charArray;
	        wchar_t filename[4096] = {0};
	        MultiByteToWideChar(0, 0, cs[1], strlen(cs[1]), filename, strlen(cs[1]));
	    }